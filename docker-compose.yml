version: '3.2'

services:
  db:
    image: 'postgres:9.6-alpine' # Dev Only
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
    networks:
      - workshop
    volumes:
      - db:/data/db
    healthcheck:
      test:
        - CMD
        - pg_isready
        - '--username=postgres'
      interval: 10s
      timeout: 5s
      retries: 5

  kong_provision:
    image: 'kong:1.0'
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
    networks:
      - workshop
    restart: on-failure:3
    command:
      kong migrations bootstrap

  kong:
    image: 'kong:1.0'
    depends_on:
      - kong_provision
    restart: always
    container_name: kong
    volumes:
      - type: bind
        source: ./data/kong
        target: /logs
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    networks:
      - workshop
    ports:
      - 8000:8000
      - 8001:8001


  api1:
    build: ./api
    # image: 'fake_api'
    container_name: api1
    volumes:
      - type: bind
        source: ./data/api1
        target: /data
    networks:
      - workshop

  api2:
    build: ./api
    # image: 'fake_api'
    container_name: api2
    volumes:
      - type: bind
        source: ./data/api2
        target: /data
    networks:
      - workshop

networks:
  workshop: null

volumes:
  db:
    external: false
